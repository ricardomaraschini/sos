!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BLANK	video.c	3;"	d	file:
IRQ_NOERRORCODE	start.asm	/^IRQ_NOERRORCODE 0,32$/;"	l
IRQ_NOERRORCODE	start.asm	/^IRQ_NOERRORCODE 1,33$/;"	l
IRQ_NOERRORCODE	start.asm	/^IRQ_NOERRORCODE 10,42$/;"	l
IRQ_NOERRORCODE	start.asm	/^IRQ_NOERRORCODE 11,43$/;"	l
IRQ_NOERRORCODE	start.asm	/^IRQ_NOERRORCODE 12,44$/;"	l
IRQ_NOERRORCODE	start.asm	/^IRQ_NOERRORCODE 13,45$/;"	l
IRQ_NOERRORCODE	start.asm	/^IRQ_NOERRORCODE 14,46$/;"	l
IRQ_NOERRORCODE	start.asm	/^IRQ_NOERRORCODE 15,47$/;"	l
IRQ_NOERRORCODE	start.asm	/^IRQ_NOERRORCODE 2,34$/;"	l
IRQ_NOERRORCODE	start.asm	/^IRQ_NOERRORCODE 3,35$/;"	l
IRQ_NOERRORCODE	start.asm	/^IRQ_NOERRORCODE 4,36$/;"	l
IRQ_NOERRORCODE	start.asm	/^IRQ_NOERRORCODE 5,37$/;"	l
IRQ_NOERRORCODE	start.asm	/^IRQ_NOERRORCODE 6,38$/;"	l
IRQ_NOERRORCODE	start.asm	/^IRQ_NOERRORCODE 7,39$/;"	l
IRQ_NOERRORCODE	start.asm	/^IRQ_NOERRORCODE 8,40$/;"	l
IRQ_NOERRORCODE	start.asm	/^IRQ_NOERRORCODE 9,41$/;"	l
ISR_ERRCODE	start.asm	/^ISR_ERRCODE   10$/;"	l
ISR_ERRCODE	start.asm	/^ISR_ERRCODE   11$/;"	l
ISR_ERRCODE	start.asm	/^ISR_ERRCODE   12$/;"	l
ISR_ERRCODE	start.asm	/^ISR_ERRCODE   13$/;"	l
ISR_ERRCODE	start.asm	/^ISR_ERRCODE   14$/;"	l
ISR_ERRCODE	start.asm	/^ISR_ERRCODE   8$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 0$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 1$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 15$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 16$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 17$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 18$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 19$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 2$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 20$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 21$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 22$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 23$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 24$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 25$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 26$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 27$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 28$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 29$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 3$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 30$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 31$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 4$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 5$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 6$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 7$/;"	l
ISR_NOERRCODE	start.asm	/^ISR_NOERRCODE 9$/;"	l
KB_BUF	kb.c	3;"	d	file:
MAX_EVENTS	pit.c	9;"	d	file:
MPIC	irq.c	45;"	d	file:
MPIC_COMMAND	irq.c	47;"	d	file:
MPIC_DATA	irq.c	48;"	d	file:
MPIC_OFFSET	irq.c	59;"	d	file:
MULTIBOOT_AOUT_KLUDGE	start.asm	/^	MULTIBOOT_AOUT_KLUDGE	equ 1<<16$/;"	d
MULTIBOOT_CHECKSUM	start.asm	/^	MULTIBOOT_CHECKSUM	equ -(MULTIBOOT_HEADER_MAGIC + MULTIBOOT_HEADER_FLAGS)$/;"	d
MULTIBOOT_HEADER_FLAGS	start.asm	/^	MULTIBOOT_HEADER_FLAGS	equ MULTIBOOT_PAGE_ALIGN | MULTIBOOT_MEMORY_INFO | MULTIBOOT_AOUT_KLUDGE$/;"	d
MULTIBOOT_HEADER_MAGIC	start.asm	/^	MULTIBOOT_HEADER_MAGIC	equ 0x1BADB002$/;"	d
MULTIBOOT_MEMORY_INFO	start.asm	/^	MULTIBOOT_MEMORY_INFO	equ 1<<1$/;"	d
MULTIBOOT_PAGE_ALIGN	start.asm	/^	MULTIBOOT_PAGE_ALIGN	equ 1<<0$/;"	d
PIC_EOI	irq.c	54;"	d	file:
PIC_INIT	irq.c	53;"	d	file:
PIC_MODE8886	irq.c	61;"	d	file:
PIC_SLAVE_PIC_POS	irq.c	56;"	d	file:
PIC_THERES_SLAVE	irq.c	55;"	d	file:
PIT_CMD	pit.c	7;"	d	file:
PIT_DATA0	pit.c	4;"	d	file:
PIT_DATA1	pit.c	5;"	d	file:
PIT_DATA2	pit.c	6;"	d	file:
PIT_HZ	pit.c	3;"	d	file:
SECTION	start.asm	/^SECTION .bss$/;"	l
SPIC	irq.c	46;"	d	file:
SPIC_COMMAND	irq.c	49;"	d	file:
SPIC_DATA	irq.c	50;"	d	file:
SPIC_OFFSET	irq.c	60;"	d	file:
_sys_stack	start.asm	/^_sys_stack:$/;"	l
access	gdt.c	/^	unsigned char access;$/;"	m	struct:gdt_entry	file:
always0	idt.c	/^	unsigned char always0;$/;"	m	struct:idt_entry	file:
attrib	video.c	/^int attrib = 0x0F;$/;"	v
base	gdt.c	/^	unsigned int base;$/;"	m	struct:gdt_ptr	file:
base	idt.c	/^	unsigned int base;$/;"	m	struct:idt_ptr	file:
base_hi	idt.c	/^	unsigned short base_hi; \/\/ upper 16 bits of the address to jump to$/;"	m	struct:idt_entry	file:
base_high	gdt.c	/^	unsigned char base_high;$/;"	m	struct:gdt_entry	file:
base_lo	idt.c	/^	unsigned short base_lo; \/\/ lower 16 bits of the address to jump to when this interrupt fires.$/;"	m	struct:idt_entry	file:
base_low	gdt.c	/^	unsigned short base_low;$/;"	m	struct:gdt_entry	file:
base_middle	gdt.c	/^	unsigned char base_middle;$/;"	m	struct:gdt_entry	file:
cls	video.c	/^cls() $/;"	f
cursor	video.c	/^struct cursor_position cursor = {0,0};$/;"	v	typeref:struct:cursor_position
dispatch_events	pit.c	/^dispatch_events()$/;"	f
empty_events_queue	pit.c	/^empty_events_queue() {$/;"	f
enable_hw_interrupts	main.c	/^enable_hw_interrupts()$/;"	f
event_handler	pit.c	/^event_handler() {$/;"	f
exception_messages	idt.c	/^exception_messages[] =$/;"	v
extern	start.asm	/^extern fault_handler$/;"	l
extern	start.asm	/^extern gp$/;"	l
extern	start.asm	/^extern idtp$/;"	l
extern	start.asm	/^extern irq_handler$/;"	l
fault_handler	idt.c	/^fault_handler(struct regs *r)$/;"	f
flags	idt.c	/^	unsigned char flags;$/;"	m	struct:idt_entry	file:
flush2	start.asm	/^flush2:$/;"	l
gdt	gdt.c	/^struct gdt_entry gdt[5]; \/\/ our 3 gdts entries $/;"	v	typeref:struct:gdt_entry
gdt_entry	gdt.c	/^struct gdt_entry {$/;"	s	file:
gdt_flush	start.asm	/^gdt_flush:$/;"	l
gdt_install	gdt.c	/^gdt_install()$/;"	f
gdt_ptr	gdt.c	/^struct gdt_ptr {$/;"	s	file:
gdt_set_gate	gdt.c	/^gdt_set_gate( int num, $/;"	f
global	start.asm	/^global gdt_flush$/;"	l
global	start.asm	/^global idt_load$/;"	l
global	start.asm	/^global irq_%1$/;"	l
global	start.asm	/^global isr%1$/;"	l
global	start.asm	/^global start$/;"	l
global_events	pit.c	/^struct scheduled_event global_events[MAX_EVENTS];$/;"	v	typeref:struct:scheduled_event
gp	gdt.c	/^struct gdt_ptr gp;$/;"	v	typeref:struct:gdt_ptr
granularity	gdt.c	/^	unsigned char granularity;$/;"	m	struct:gdt_entry	file:
idt	idt.c	/^struct idt_entry idt[256]; \/\/ 256 interrupt handlers$/;"	v	typeref:struct:idt_entry
idt_entry	idt.c	/^struct idt_entry {$/;"	s	file:
idt_install	idt.c	/^idt_install()$/;"	f
idt_load	start.asm	/^idt_load:$/;"	l
idt_ptr	idt.c	/^struct idt_ptr {$/;"	s	file:
idt_set_gate	idt.c	/^idt_set_gate( int num,$/;"	f
idtp	idt.c	/^struct idt_ptr idtp;$/;"	v	typeref:struct:idt_ptr
init_timer	pit.c	/^init_timer(int frequency) {$/;"	f
init_video	video.c	/^init_video(void)$/;"	f
inportb	main.c	/^inportb (unsigned short _port)$/;"	f
irq_common_stub	start.asm	/^irq_common_stub:$/;"	l
irq_handler	irq.c	/^irq_handler(struct regs *r)$/;"	f
irq_install	irq.c	/^irq_install()$/;"	f
irq_install_handler	irq.c	/^irq_install_handler(int irq, void (*h)(struct regs *r)) $/;"	f
irq_remap	irq.c	/^irq_remap(void)$/;"	f
irq_routines	irq.c	/^void * irq_routines[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};$/;"	v
isr_common_stub	start.asm	/^isr_common_stub:$/;"	l
kbdus	kb.c	/^unsigned char kbdus[128] =$/;"	v
keyboard_handler	kb.c	/^keyboard_handler(struct regs *r)$/;"	f
keyboard_install	kb.c	/^keyboard_install()$/;"	f
limit	gdt.c	/^	unsigned short limit;$/;"	m	struct:gdt_ptr	file:
limit	idt.c	/^	unsigned short limit;$/;"	m	struct:idt_ptr	file:
limit_low	gdt.c	/^	unsigned short limit_low;$/;"	m	struct:gdt_entry	file:
main	main.c	/^main()$/;"	f
mboot	start.asm	/^mboot:$/;"	l
memcmp	main.c	/^memcmp(void *s1, void *s2, int n)$/;"	f
memcpy	main.c	/^memcpy(void *dest, void *src, int count)$/;"	f
memset	main.c	/^*memset(unsigned char *dest, unsigned char val, int count)$/;"	f
memsetw	main.c	/^*memsetw(unsigned short *dest, unsigned short val, int count)$/;"	f
move_csr	video.c	/^move_csr(void)$/;"	f
outportb	main.c	/^outportb (unsigned short _port, unsigned char _data)$/;"	f
pop	start.asm	/^	pop ds$/;"	d
push	start.asm	/^	push ds$/;"	d
putch	video.c	/^putch(unsigned char c)$/;"	f
putint	video.c	/^putint(int d)$/;"	f
puts	video.c	/^puts(char *text)$/;"	f
register_event	pit.c	/^register_event(unsigned long every, void (*handler)()) {$/;"	f
scroll	video.c	/^scroll(void)$/;"	f
sel	idt.c	/^	unsigned short sel; \/\/ kernel segment selector$/;"	m	struct:idt_entry	file:
settextcolor	video.c	/^settextcolor(unsigned char backcolor, unsigned char forecolor)$/;"	f
start	start.asm	/^start:$/;"	l
strlen	main.c	/^strlen(char *str)$/;"	f
stublet	start.asm	/^stublet:$/;"	l
textmemptr	video.c	/^unsigned short *textmemptr;$/;"	v
ticks	pit.c	/^unsigned long ticks = 0;$/;"	v
timer_callback	pit.c	/^timer_callback(struct regs *r) {$/;"	f
uninstall_irq	irq.c	/^uninstall_irq(int irq) $/;"	f
